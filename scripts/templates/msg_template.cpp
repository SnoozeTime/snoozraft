/// CLASS WAS AUTOGENERATED  - DO NOT MODIFY

#pragma once
#include <sstream>
#include <string>

#include "snooz_utils.h"
#include "protocol/message.h"
#include "protocol/msg_handler.h"


namespace snooz {
class {{ msg.name }}Message: public MessageData {
public:

  {{ msg.name }}Message() = default;


  {% if msg.args|length > 0 %}
  {{ msg.name }}Message({% for arg in msg.args %}{{ arg.type }} {{ arg.name }}{{ "," if not loop.last }}{% endfor %}):
  {% for arg in msg.args %}
  {{ arg.name}}_(std::move({{ arg.name }})){{ "," if not loop.last }}
  {% endfor %} {}
  {% endif %}

  // Default move because the types should be trivials..
  {{ msg.name }}Message({{ msg.name }}Message&& other) noexcept = default;
  {{ msg.name }}Message& operator=({{ msg.name}}Message&& other) = default;

  void dispatch(const std::string& from, MessageHandler& handler) override {
    handler.on_message(from, *this);
  }
  
  MessageType message_type() override {
    return MessageType::{{ msg.message_type }};
  }

  void unpack(std::string& ss) override {
    {% if msg.args|length > 0 %}
    size_t offset = 0;
    {% for arg in msg.args %}
    {
      auto oh = msgpack::unpack(ss.c_str(), ss.size(), offset);
      auto o = oh.get();
      {{ arg.name }}_ = o.as<{{ arg.type }}>();
    }
    {% endfor %}
    {% else %}
    UNUSED(ss);
    {% endif %}
  }

  void pack(std::stringstream& ss) override {
    {% if msg.args|length > 0 %}
    {% for arg in msg.args %}
    msgpack::pack(ss, {{ arg.name }}_);
    {% endfor %}
    {% else %}
    UNUSED(ss);
    {% endif %}
  }

  // Then Getters and setters
  {% for arg in msg.args %}
  void set_{{ arg.name }}(const {{ arg.type }}& {{ arg.name }}) { {{ arg.name }}_ = {{ arg.name }};}
  const {{ arg.type }}& {{ arg.name }}() const { return {{ arg.name }}_;}
  {% endfor %}

  // double dispatch to avoid casting.
  //  void dispatch(MessageHandler* handler) override {
  //  handler->handle(*this);
  //}

private:
  {% for member in msg.args %}
  {{ member.type }} {{ member.name}}_{};
  {% endfor %}
};
}
