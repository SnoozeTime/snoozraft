/// CLASS WAS AUTOGENERATED  - DO NOT MODIFY

#pragma once
#include <sstream>
#include <string>

#include "msg_handler.h"
#include "protocol/message.h"
#include "snooz_utils.h"

namespace snooz {
class AppendEntriesRequestMessage : public MessageData {
public:
  AppendEntriesRequestMessage() = default;

  AppendEntriesRequestMessage(int term, std::string leader_id)
      :

        term_(std::move(term)),

        leader_id_(std::move(leader_id)) {}

  // Default move because the types should be trivials..
  AppendEntriesRequestMessage(AppendEntriesRequestMessage &&other) noexcept =
      default;
  AppendEntriesRequestMessage &
  operator=(AppendEntriesRequestMessage &&other) = default;

  void dispatch(MessageHandler &handler) override { handler.on_message(*this); }

  MessageType message_type() override {
    return MessageType::APPEND_ENTRIES_REQUEST;
  }

  void unpack(std::string &ss) override {

    size_t offset = 0;

    {
      auto oh = msgpack::unpack(ss.c_str(), ss.size(), offset);
      auto o = oh.get();
      term_ = o.as<int>();
    }

    {
      auto oh = msgpack::unpack(ss.c_str(), ss.size(), offset);
      auto o = oh.get();
      leader_id_ = o.as<std::string>();
    }
  }

  void pack(std::stringstream &ss) override {

    msgpack::pack(ss, term_);

    msgpack::pack(ss, leader_id_);
  }

  // Then Getters and setters

  void set_term(const int &term) { term_ = term; }
  const int &term() const { return term_; }

  void set_leader_id(const std::string &leader_id) { leader_id_ = leader_id; }
  const std::string &leader_id() const { return leader_id_; }

  // double dispatch to avoid casting.
  //  void dispatch(MessageHandler* handler) override {
  //  handler->handle(*this);
  //}

private:
  int term_{};

  std::string leader_id_{};
};
}