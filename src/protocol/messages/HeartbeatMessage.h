/// CLASS WAS AUTOGENERATED  - DO NOT MODIFY

#pragma once
#include <sstream>
#include <string>

#include "snooz_utils.h"
#include "protocol/message.h"

namespace snooz {
class HeartbeatMessage : public MessageData {
public:
  HeartbeatMessage() = default;

  // Default move because the types should be trivials..
  HeartbeatMessage(HeartbeatMessage &&other) noexcept = default;
  HeartbeatMessage &operator=(HeartbeatMessage &&other) = default;

  MessageType message_type() override { return MessageType::HEARTBEAT; }

  void unpack(std::string &ss) override { UNUSED(ss); }

  void pack(std::stringstream &ss) override { UNUSED(ss); }

  // Then Getters and setters

  // double dispatch to avoid casting.
  //  void dispatch(MessageHandler* handler) override {
  //  handler->handle(*this);
  //}

private:
};
}